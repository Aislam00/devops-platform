name: CD

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      component:
        description: 'Component to deploy'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - infrastructure
        - platform-api
        - backstage

env:
  AWS_REGION: eu-west-2
  ECR_REGISTRY: 475641479654.dkr.ecr.eu-west-2.amazonaws.com

jobs:
  infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event.inputs.component == 'infrastructure' || github.event.inputs.component == 'all' || github.event.inputs.component == '')
    outputs:
      cluster-name: ${{ steps.terraform.outputs.cluster-name }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy Infrastructure
      run: |
        cd terraform/infrastructure
        terraform init
        terraform plan
        terraform apply -auto-approve

    - name: Get cluster name
      id: terraform
      run: |
        cd terraform/infrastructure
        echo "cluster-name=$(terraform output -raw eks_cluster_name)" >> $GITHUB_OUTPUT

  build-api:
    name: Build API
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event.inputs.component == 'platform-api' || github.event.inputs.component == 'all' || github.event.inputs.component == '')
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push API
      run: |
        cd platform-api
        docker build -t $ECR_REGISTRY/devplatform-api:latest .
        docker push $ECR_REGISTRY/devplatform-api:latest

  build-portal:
    name: Build Portal
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event.inputs.component == 'backstage' || github.event.inputs.component == 'all' || github.event.inputs.component == '')
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'
        cache-dependency-path: backstage/portal/yarn.lock

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build Backstage
      run: |
        cd backstage/portal
        yarn install --frozen-lockfile
        yarn build:backend
        yarn build-image --tag $ECR_REGISTRY/devplatform-portal:latest

    - name: Push to ECR
      run: |
        docker push $ECR_REGISTRY/devplatform-portal:latest

  deploy-api:
    name: Deploy API
    runs-on: ubuntu-latest
    needs: [infrastructure, build-api]
    if: always() && !failure() && github.ref == 'refs/heads/main' && (github.event.inputs.component == 'platform-api' || github.event.inputs.component == 'all' || github.event.inputs.component == '')
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: v1.28.0

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ needs.infrastructure.outputs.cluster-name || 'devplatform-dev' }}

    - name: Deploy API
      run: |
        kubectl apply -f k8s/secure-platform-api.yaml
        kubectl wait --for=condition=available --timeout=300s deployment/platform-api -n platform-api

  deploy-portal:
    name: Deploy Portal
    runs-on: ubuntu-latest
    needs: [infrastructure, build-portal, deploy-api]
    if: always() && !failure() && github.ref == 'refs/heads/main' && (github.event.inputs.component == 'backstage' || github.event.inputs.component == 'all' || github.event.inputs.component == '')
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: v1.28.0

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ needs.infrastructure.outputs.cluster-name || 'devplatform-dev' }}

    - name: Deploy Portal
      run: |
        kubectl apply -f k8s/secure-backstage.yaml
        kubectl wait --for=condition=available --timeout=600s deployment/backstage -n backstage